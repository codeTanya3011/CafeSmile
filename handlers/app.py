import os
import asyncio
from os import getenv

from pathlib import Path
from aiogram import Bot, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, LabeledPrice, KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv, find_dotenv

from database.db_utils import *
from keyboards.inline_kb import *
from keyboards.reply_kb import *
from utils.caption import *


load_dotenv(find_dotenv())  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ .env

MEDIA_PATH = os.getenv("MEDIA_PATH")
if MEDIA_PATH:
    MEDIA_PATH = Path(MEDIA_PATH).resolve()
else:
    MEDIA_PATH = Path("./media").resolve()  # –î–µ—Ñ–æ–ª—Ç–Ω–∏–π —à–ª—è—Ö, —è–∫—â–æ MEDIA_PATH –Ω–µ–º–∞—î –≤ .env

TOKEN = os.getenv('TOKEN')
PAY = os.getenv('PORTMONE')
MANAGER = os.getenv('MANAGER')

router = Router()
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

LANGUAGES = {
    "üá¨üáß English": "en",
    "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk"
}

user_language = {}  # TODO: –°—Ö–æ–≤–∏—â–µ –º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤


def get_image_path(image_name):
    return MEDIA_PATH / image_name


@router.message(F.text == "‚ú® –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def handle_main_menu(message: Message):
    await message.answer(
        text="üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=generate_main_menu())


@router.message(CommandStart())
async def command_start(message: Message):
    await message.answer(f"–î–æ–±—Ä–∏–π –¥–µ–Ω—å, <b>{message.from_user.full_name}!</b>\n"
                         f"–≤–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç cafesmile!")
    await start_register_user(message)


@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def start_handler(message: Message):
    buttons = [[KeyboardButton(text=lang)] for lang in LANGUAGES.keys()]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language:", reply_markup=keyboard)


@router.message(F.text.in_(LANGUAGES.keys()))
async def set_language_handler(message: Message):
    user_id = message.chat.id
    selected_language = LANGUAGES[message.text]
    user_language[user_id] = selected_language

    if selected_language == "en":
        await message.answer("Language set to English. Let's get started!")
    elif selected_language == "uk":
        await message.answer("–ú–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É. –†–æ–∑–ø–æ—á–Ω–µ–º–æ!")

    await show_main_menu(message)


async def start_register_user(message: Message):
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    if db_register_user(full_name, chat_id):
        await message.answer(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
        await show_main_menu(message)
    else:
        await message.answer(text="–î–ª—è –∑–≤'—è–∑–∫—É –∑ –í–∞–º–∏ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä",
                             reply_markup=share_phone_button())


@router.message(F.contact)
async def update_user_info_finish_register(message: Message):
    chat_id = message.chat.id
    phone = message.contact.phone_number
    db_update_user(chat_id, phone)
    if db_create_user_cart(chat_id):
        await message.answer(text="–†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!")

    await show_main_menu(message)


@router.message(F.text == "üéØüèáüèº –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
async def start_handler(message: Message):
    delivery_button = KeyboardButton(text="üöõ –î–æ—Å—Ç–∞–≤–∫–∞")
    pickup_button = KeyboardButton(text="üö¥üèº‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤–∏–≤—ñ–∑")
    keyboard = ReplyKeyboardMarkup(keyboard=[[delivery_button, pickup_button]], resize_keyboard=True)

    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:", reply_markup=keyboard)


@router.message(F.text == "üöõ –î–æ—Å—Ç–∞–≤–∫–∞")
async def delivery_handler(message: Message):
    location_button = KeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True)

    await message.answer(text="–í–∏ –æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É ‚úÖ\n"
                              "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ) ‚ô•Ô∏è",
                         reply_markup=back_and_main_menu_buttons())


@router.message(F.text == "üö¥üèº‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤–∏–≤—ñ–∑")
async def pickup_handler(message: Message):
    await message.answer(text="–í–∏ –æ–±—Ä–∞–ª–∏ —Å–∞–º–æ–≤–∏–≤—ñ–∑ ‚úÖ\n"
                              "–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞: –≤—É–ª. –ú–∏—Ä–Ω–∞, –±—É–¥. 23\n"
                              "–û–ø–ª–∞—Ç—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ–∫—É–ø–∫—É, –∞ –º–∏ –±—É–¥–µ–º–æ –Ω–∞ –≤–∞—Å —á–µ–∫–∞—Ç–∏ ‚ô•Ô∏è",
                         reply_markup=back_and_main_menu_buttons())
    

@router.message(lambda message: message.location is not None)
async def location_handler(message: Message):
    latitude = message.location.latitude
    longitude = message.location.longitude

    await message.answer(f"–î—è–∫—É—é! –í–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ:\n–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–≤–≥–æ—Ç–∞: {longitude}")
    await message.answer(text="–î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º‚ù§Ô∏è‚Äçüî•–ß–µ–∫–∞–π—Ç–µ!")
    await asyncio.sleep(9) # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
    await message.answer(text="–î–æ—Å—Ç–∞–≤–∫–∞ –≤–∏—Ö–æ–¥–∏—Ç—å 100 UAH –ø–æ –º—ñ—Å—Ç—Éüçæ\n"
                              "–Ø–∫—â–æ –≤–∞—Å –≤–ª–∞—à—Ç–æ–≤—É—î, —Å–ø–ª–∞—Ç—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞ —á–µ–∫–∞–π—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏üçΩ\n"
                              "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é –≤–∞–º –º–æ–∂–µ –ø–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Äü§ô\n–ì–∞—Ä–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è —Ç–∞ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñü´∞")
    await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é", reply_markup=back_to_main_menu())


async def show_main_menu(message: Message):
    await message.answer(text='üîÉ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫',
                         reply_markup=generate_main_menu())


@router.message(F.text == "‚úÖ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def make_order(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id=chat_id,
                           text='ü™Ñ –†–æ–∑–ø–æ—á–Ω–µ–º–æ',
                           reply_markup=back_to_main_menu())
    await message.answer(text="üìã –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
                         reply_markup=generate_category_menu(chat_id))


@router.message(F.text.regexp(r'–ì[–∞-—è]+ [–∞-—è]{4}'))
async def return_to_main_menu(message: Message):
    try:
        await bot.delete_message(chat_id=message.chat.id,
                                 message_id=message.message_id - 1)
    except TelegramBadRequest:
        ...
    await show_main_menu(message)


@router.callback_query(F.data.regexp(r'category_[1-15]'))
async def show_product_button(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    category_id = int(call.data.split('_')[-1])
    await bot.edit_message_text(text='ü•¢ –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=show_product_by_category(category_id))


@router.callback_query(F.data == 'return_to_category')
async def return_to_category_button(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text='üçé –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é',
                                reply_markup=generate_category_menu(chat_id))


@router.callback_query(F.data.contains('product_'))
async def show_product_detail(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    product_id = int(call.data.split('_')[-1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –∑ –±–¥
    product = db_get_product_by_id(product_id)

    if not product:
        await bot.send_message(chat_id=chat_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    category = product.product_category
    category_id = category.id if category else None 

    image_path = get_image_path(product.image)

    if not os.path.exists(image_path):
        print(f"–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {image_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—ñ
        await bot.send_message(chat_id=chat_id, text="–ü–æ–º–∏–ª–∫–∞: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    # class UserState(StatesGroup):
    #     step1 = State() 
    #     step2 = State() 

    # back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_previous_step")
    # back_button_markup = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    if user_cart := db_get_user_cart(chat_id):
        db_update_to_cart(price=product.price, cart_id=user_cart.id)
        category_id = int(call.data.split('_')[-1])
        text = text_for_caption(product.product_name, product.description, product.price)
        await bot.send_message(chat_id=chat_id,
                               text="üçê –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä",
                               reply_markup=generate_category_menu(chat_id))
        await bot.send_photo(chat_id=chat_id,
                             photo=FSInputFile(str(image_path)),
                            #  media=InputMediaPhoto(media=FSInputFile(path=product.image), caption=text),
                             caption=text,
                             reply_markup=generate_constructor_button(category_id)) 

    else:
        await bot.send_message(chat_id=chat_id,
                               text="üòø –ù–∞ –∂–∞–ª—å, —É –Ω–∞—Å –Ω–µ–º–∞—î –í–∞—à–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É",
                               reply_markup=share_phone_button())


# @router.callback_query(F.data == "back_to_previous_step")
# async def back_to_previous_step(call: CallbackQuery, state: FSMContext):
#     user_state = await state.get_state()

#     if user_state == "UserState.step2":
#         await call.message.answer("", reply_markup=back_button_markup)
#         await state.set_state("UserState.step1")  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ 1 –∫—Ä–æ–∫—É

#     elif user_state == "UserState.step1":
#         await call.message.answer("", reply_markup=back_button_markup)
#     # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
#     await call.answer()

# @router.callback_query(F.data == 'back_to_products')
# async def back_to_products_button(call: CallbackQuery):
#     chat_id = call.message.chat.id
    
#     await bot.send_message(
#         chat_id=chat_id,
#         text="–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä",
#         reply_markup=show_product_by_category(chat_id))


# @router.message(F.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥')
# async def return_to_category_menu(message: Message):
#     await bot.delete_message(message.chat.id, message.message_id - 1)
#     await make_order(message)


@router.callback_query(F.data.regexp(r'action [+-]'))
async def constructor_change(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id
    action = call.data.split()[-1]
    product_name = call.message.caption.split('\n')[0]

    user_cart = db_get_user_cart(chat_id) 
    product = db_get_product_by_name(product_name)

    if not product:
        await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    if not user_cart:
        await call.message.answer("‚ùå –ö–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    quantity = user_cart.total_products

    match action:
        case '+':
            quantity += 1
        case '-':
            if quantity < 2:
                await call.answer('‚ùóÔ∏è –ú–µ–Ω—à–µ 1 —Ç–æ–≤–∞—Ä—É –≤–∏–±—Ä–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞')
                return
            quantity -= 1

    total_price = product.price * quantity
    db_update_to_cart(price=total_price, quantity=quantity, cart_id=user_cart.id)

    text = text_for_caption(name=product_name, description=product.description, price=total_price)

    try:
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=message_id,
            media=InputMediaPhoto(media=FSInputFile(product.image), caption=text),
            reply_markup=generate_constructor_button(user_cart.total_products)
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == 'put info cart')
async def put_info_cart(call: CallbackQuery):
    chat_id = call.from_user.id
    product_name = call.message.caption.split('\n')[0]
    cart = db_get_user_cart(chat_id)

    await bot.delete_message(chat_id=chat_id,
                             message_id=call.message.message_id)
    if db_ins_or_upd_finally_cart(cart_id=cart.id,
                                  product_name=product_name,
                                  total_products=cart.total_products,
                                  total_price=cart.total_price):
        await bot.send_message(chat_id=chat_id,
                               text='‚òëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π')
    else:
        await bot.send_message(chat_id=chat_id,
                               text='‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ')

    await generate_category_menu(chat_id)


@router.callback_query(F.data == '–í–∞—à –∫–æ—à–∏–∫')
async def show_finally_cart(call: CallbackQuery):
    message_id = call.message.message_id
    chat_id = call.from_user.id
    await bot.delete_message(chat_id=chat_id,
                             message_id=call.message.message_id)
    context = counting_products_from_cart(chat_id, 'üß∫ –í–∞—à –∫–æ—à–∏–∫:')
    if context:
        count, text, *_ = context
        await bot.send_message(chat_id=chat_id,
                               text=text,
                               reply_markup=generate_delete_product(chat_id))
    else:
        await bot.send_message(chat_id=chat_id,
                               text='üò± –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
        await make_order(call.message)


@router.callback_query(F.data.regexp(r'delete_\d+'))
async def delete_cart_product(call: CallbackQuery):
    # Delete buttons ‚ùå
    finally_id = int(call.data.split('_')[-1])
    db_delete_product(finally_id)
    await bot.answer_callback_query(callback_query_id=call.id,
                                    text='–ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞‚ùóÔ∏è')
    await show_finally_cart(call)


@router.callback_query(F.data == 'order_pay')
async def test_payment(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    count, text, total_price, cart_id = counting_products_from_cart(
        chat_id=chat_id,
        user_text='üßÆ –û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:'
    )
    text += "\nüí∞ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É 100 UAH"
    total_price += 100  # –¥–æ—Å—Ç–∞–≤–∫–∞

    await call.message.answer("üí≥ –û–±—Ä–æ–±–∫–∞ –æ–ø–ª–∞—Ç–∏... –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä—ñ—à–∫–∏ ‚è≥")

    await asyncio.sleep(10)

    try:
        clear_finally_cart(chat_id)
        await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
        await sending_report_to_manager(chat_id, text)
    except Exception as e:
        await call.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞: {e}")


# @router.callback_query(F.data == 'order_pay')
# async def create_order(call: CallbackQuery):
#     # –û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä—ñ–≤ (—Ç–µ—Å—Ç–æ–≤–∞)
#     chat_id = call.from_user.id
#     message_id = call.message.message_id
#     await bot.delete_message(chat_id=chat_id,
#                              message_id=message_id)

#     count, text, total_price, cart_id = counting_products_from_cart(chat_id=chat_id,
#                                                                     user_text='üßÆ –û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:')
#     text += "\nüí∞ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É 100 UAH"

#     await bot.send_invoice(chat_id=chat_id,
#                            title='–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:',
#                            description=text,
#                            payload='bot-defined invoice payload',
#                            provider_token=PAY,
#                            currency='UAH',
#                            prices=[
#                                LabeledPrice(label='üßÆ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å', amount=int(total_price) * 100),
#                                LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=100 * 100)
#                            ])
#     await sending_report_to_manager(chat_id, text)


# @router.message(F.successful_payment)
# async def payment_successful(message: Message):
#     chat_id = message.from_user.id
#     try:
#         clear_finally_cart(chat_id)
#         await message.answer("–î—è–∫—É—é –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É‚ùóÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ, –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π")
#     except Exception as e:
#         await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞: {e}")


async def sending_report_to_manager(chat_id: int, text: str):
    user = db_get_user_info(chat_id)
    text += f"\n\n–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {user.name}\n–ö–æ–Ω—Ç–∞–∫—Ç: {user.phone}\n\n"
    await bot.send_message(chat_id=MANAGER,
                           text=text)


@router.message(F.text == 'üß∫ –ö–æ—à–∏–∫')
async def make_order(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id=chat_id,
                           text='–ü–æ—á–Ω–µ–º–æ',
                           reply_markup=back_to_main_menu())
    context = counting_products_from_cart(chat_id, 'üß∫ –í–∞—à –∫–æ—à–∏–∫:')
    if context:
        count, text, *_ = context
        await bot.send_message(chat_id=chat_id,
                               text=text,
                               reply_markup=generate_delete_product(chat_id))
    else:
        await bot.send_message(chat_id=chat_id, text='üò± –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')

